"""
Django settings for ticker_new project.

Generated by 'django-admin startproject' using Django 4.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-k=xpusre3dyjgvjw2s=m$tj#h#+j-y0ht*utccupk%oa@f(f5t'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'daphne',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 'celery',
    # 'django_celery_beat',  # Add django_celery_beat to the list of installed apps

    'celery',
    'django_celery_beat',  # Add django_celery_beat to the list of installed apps
    'polls',
    'corsheaders',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

]

ROOT_URLCONF = 'ticker_new.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ticker_new.wsgi.application'
ASGI_APPLICATION='ticker_new.asgi.application'
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [("127.0.0.1", 6379)],
        },
    },
}

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'fsma',
        'USER': 'postgres',
        'PASSWORD': 'ticker1234',
        'HOST': '',  # Leave empty for localhost
        'PORT': '5432',  # Default port is 5432
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

TIME_ZONE = 'Asia/Karachi'

# TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  # Set your static root directory here

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/
# STATIC_ROOT='root'
STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
STATICFILES_DIRS=[
    # 'extract',
    'ticker_images/Geo_Ticker',
    'ticker_images/Ary_Ticker',
    'ticker_images/Samaa_Ticker',
    'ticker_images/Dunya_Ticker',
    'ticker_images/Express_Ticker',
    'ticker_images/ktn_Ticker',

    'ticker_images/India_Today_Ticker',
    'ticker_images/Aljazeera_Ticker',
    'ticker_images/Cnn_Ticker',
    'ticker_images/Rt_Ticker',
    'ticker_images/Bbc_Ticker',
    'ticker_images/Ninety_Two_Ticker',
    'ticker_images/Twenty_Four_Ticker',
    'ticker_images/Gnn_Ticker',
    'ticker_images/Hum_Ticker',
    'ticker_images/Neo_Ticker',
    'ticker_images/Ptv_Ticker',
    'ticker_images/Dawn_Ticker',
    'ticker_images/Aaj_Ticker',


]

CORS_ALLOW_ALL_ORIGINS = True

CORS_ALLOWED_ORIGINS = [
   "http://127.0.0.1:3000",
   "http://192.168.2.92:3000",
    "http://192.168.18.119:3000",

   "https://192.168.2.92"
]

# Enable HTTPS
# SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
# SECURE_SSL_REDIRECT = True


SECURE_HSTS_SECONDS = 31536000  # One year
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_BROWSER_XSS_FILTER = True

STATICFILES_STORAGE = 'whitenoise.storage.StaticFilesStorage'

# Example configuration for RabbitMQ as the broker
# BROKER_URL='amqp://celeryuser@localhost:5672//'
# BROKER_VHOST='/celeryhost'
BROKER_URL = 'amqp://celeryuser@localhost:5672/celeryhost'
CELERY_RESULT_BACKEND = None
# if you want to use database uncomment this
# CELERY_RESULT_BACKEND = 'db+postgresql://postgres:ticker@1234@localhost/postgres'
# The redirection in mainly happening from view.py
LOGIN_REDIRECT_URL = "{% url 'index' %}"

# Set the logout redirect URL
LOGOUT_REDIRECT_URL = "{% url 'logout' %}"
CELERY_WORKER_HIJACK_ROOT_LOGGER = False


SESSION_COOKIE_AGE = 315360000  # 10 years

# Set to False to keep the session data after the browser is closed
SESSION_EXPIRE_AT_BROWSER_CLOSE = False

# Use database-backed session storage
SESSION_ENGINE = 'django.contrib.sessions.backends.db'

CELERY_RESULT_BACKEND = 'rpc://'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
